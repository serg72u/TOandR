МОДУЛЬ ОБЫЧНОГО ПРИЛОЖЕНИЯ
 
1.Раздел описания переменных вставить следующий код:
  //=ТОиР==>
Перем глТекущийПользователь Экспорт; 				// В переменной содержится значение
                   									// текущего пользователя данной конфигурации
													
Перем МенеджерЛицензий Экспорт;						// В переменной содержится значение
                									// менеджера лицензий данной конфигурации
													
Перем ИспользоватьМенеджерЛицензий Экспорт; 		// Глобальный флаг:
													// использовать защищенные обработки или нет.
													
Перем ОбработкаЗащитаУправленияРемонтами Экспорт; 	// В переменной содержится значение
												  	// обработки торо_ЗащитаУправлениеРемонтами
//<==ТОиР=

2. В процедуру ПриНачалеРаботыСистемы вставить следующий код:
 
//=ТОиР==>
	ОткрытьПанельФункций = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтображатьПанельФункцийТОиР");
	Если ОткрытьПанельФункций Тогда 
		ОбработкаПанельФункций = Обработки.торо_ПанельФункций.Создать();
		ОбработкаПанельФункций.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	ОткрытьПанельЗадач = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтображатьПанельЗадачТОиР");
	Если ОткрытьПанельЗадач Тогда 
		ОбработкаПанельФункций = Обработки.торо_ТекущиеЗадачи.Создать();
		ОбработкаПанельФункций.ПолучитьФорму().Открыть();
	КонецЕсли;
//<==ТОиР=

3. В процедуру ПередНачаломРаботыСистемы вставить следующий код:
	//=ТОиР==>
	Если Не Отказ Тогда
		
		ИспользоватьМенеджерЛицензий = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьТОиР");
		Если ИспользоватьМенеджерЛицензий Тогда
			
			ЗапускМенеджераЛицензий();
			
		КонецЕсли;
		
	КонецЕсли; 
	//<==ТОиР=


4. В разделе описания процедур и функций, необходимо вставить следующий код:
	//=ТОиР==>

	// Функция выполняет запуск менежера лицензий
	//
	// Параметры:
	// Нет.
	//
	// Возвращаемое значение:
	// МенеджерЛицензий   внешняя компонента лицензирования конфигурации.
	//
	Функция ЗапускМенеджераЛицензий() Экспорт

		Возврат торо_ОбщийМодульСЛК.ПодключитьКомпонентуСЛК();
		
	КонецФункции

	//Функция выполняет проверку запуска менеджера лицензий ТОиР
	//
	Функция МенеджерЛицензийТОИРЗапущен() Экспорт

		МенеджерЛицезийЗапущен = Истина;
		
		Если МенеджерЛицензий = Неопределено Тогда
			
			МенеджерЛицезийЗапущен = Ложь;
			
		ИначеЕсли Не(ТипЗнч(МенеджерЛицензий) = Тип("AddIn.Licence.LicenceExtension20")
			И МенеджерЛицензий.Запущен) Тогда
			
			МенеджерЛицезийЗапущен = Ложь;
			
		КонецЕсли;
		
		Если МенеджерЛицезийЗапущен = Ложь Тогда
		
			Возврат ЗапускМенеджераЛицензий();
			
		КонецЕсли;

		Возврат Истина;
		
	КонецФункции // МенеджерЛицензийТОИРЗапущен()

	ИспользоватьМенеджерЛицензий = Ложь;

	//<==ТОиР=

МОДУЛЬ УПРАВЛЯЕМОГО ПРИЛОЖЕНИЯ
1. Раздел описания переменных вставить следующий код:
	//=ТОиР==>
	Перем глТекущийПользователь Экспорт; // В переменной содержится значение
	                   // текущего пользователя данной конфигурации

	Перем МенеджерЛицензий Экспорт;	// В переменной содержится значение
	                // менеджера лицензий данной конфигурации

	Перем ИспользоватьМенеджерЛицензий Экспорт; // Глобальный флаг:
												// использовать защищенные обработки или нет.

	Перем ОбработкаЗащитаУправленияРемонтами Экспорт; // В переменной содержится значение

	//<==ТОиР=
2. В процедуру ПередНачаломРаботыСистемы вставить следующий код:
	//=ТОиР==>
	ИспользоватьМенеджерЛицензий = торо_ФормыСерверУправляемый.ПолучитьНастройкуПользователя("ИспользоватьТОиР");
	//ПараметрыСеанса.торо_ПризнакУПП = Истина;
	Если ИспользоватьМенеджерЛицензий Тогда
		ЗапускМенеджераЛицензий();
	КонецЕсли;
	//<==ТОиР=
3. В разделе описания процедур и функций, необходимо вставить следующий код:
	//=ТОиР==>

	// Функция выполняет запуск менежера лицензий
	//
	// Параметры:
	// Нет.
	//
	// Возвращаемое значение:
	// МенеджерЛицензий   внешняя компонента лицензирования конфигурации.
	//
	Функция ЗапускМенеджераЛицензий() Экспорт

		Возврат торо_ОбщийМодульСЛК.ПодключитьКомпонентуСЛК();
		
	КонецФункции

	//Функция выполняет проверку запуска менеджера лицензий ТОиР
	//
	Функция МенеджерЛицензийТОИРЗапущен() Экспорт

		МенеджерЛицезийЗапущен = Истина;
		
		Если МенеджерЛицензий = Неопределено Тогда
			
			МенеджерЛицезийЗапущен = Ложь;
			
		ИначеЕсли Не(ТипЗнч(МенеджерЛицензий) = Тип("AddIn.Licence.LicenceExtension20")
			И МенеджерЛицензий.Запущен) Тогда
			
			МенеджерЛицезийЗапущен = Ложь;
			
		КонецЕсли;
		
		Если МенеджерЛицезийЗапущен = Ложь Тогда
		
			Возврат ЗапускМенеджераЛицензий();
			
		КонецЕсли;

		Возврат Истина;
		
	КонецФункции // МенеджерЛицензийТОИРЗапущен()

	ИспользоватьМенеджерЛицензий = Ложь;

	//<==ТОиР=

МОДУЛЬ СЕАНСА
1. В процедуру УстановкаПараметровСеанса вставить код:
	Если ТребуемыеПараметры = Неопределено Тогда
		// раздел "безусловной" инициализации параметров сеанса
		ПолныеПрава.УстановитьПараметрыМеханизмаОграниченияПравДоступа();
		
		//=> ТОиР
		торо_ПолныеПрава.УстановитьПараметрыМеханизмаОграниченияПравДоступа();
		//<= ТОиР
		
	Иначе
		...

2. В процедуру УстановкаПараметровСеанса, в ветвь Иначе вставить код: 		
		//=> ТОиР
		// СтандартныеПодсистемы
		СтандартныеПодсистемыСервер.УстановкаПараметровСеанса(ТребуемыеПараметры);
		// Конец СтандартныеПодсистемы
		//<= ТОиР

//Основная конфигурация ОбщаяФорма.ПодборРолей.Форма.Модуль  
//1. Вставить строчку в функцию ПриОткрытии()
//
//
//
//
//	//<=ТОиР
//	
//	торо_Интеграция.ДополнитьТаблицуСоответствияРолейГруппам(СписокРолейКонфигурации,ДеревоРолейДляВыбора);
//	
//	//ТОиР=>
//

Основная конфигурация ОбщаяФорма.ПодборРолейУправляемая.Форма.Модуль

1. Вставить строчки в функцию 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = Параметры.ЗаголовокФормы;
	
	// Роль "Пользователь" нельзя выбрать, она добавляется автоматически
	// Определим есть ли она у пользователя
	ЕстьРольПользователь = (СоставРолей.НайтиСтроки(Новый Структура("ИмяРоли","Пользователь")).Количество() <> 0);
	
	СписокРолейКонфигурации.Загрузить(УправлениеПользователями.ПолучитьСписокРолейКонфигурации(Истина));
	
	//<=ТОиР

	ЕстьРольТОиР = (СоставРолей.НайтиСтроки(Новый Структура("ИмяРоли","ТОиР")).Количество() <> 0);
	ДанныеСписокРолейКонфигурации = СписокРолейКонфигурации.Выгрузить();
	ДанныеДеревоРолейДляВыбора = ДанныеФормыВЗначение(ДеревоРолейДляВыбора, Тип("ДеревоЗначений"));
	
	торо_Интеграция.ДополнитьТаблицуСоответствияРолейГруппам(ДанныеСписокРолейКонфигурации, ДанныеДеревоРолейДляВыбора);
	
	ЗначениеВДанныеФормы(ДанныеСписокРолейКонфигурации, СписокРолейКонфигурации);
	ЗначениеВДанныеФормы(ДанныеДеревоРолейДляВыбора, ДеревоРолейДляВыбора);
	
	//ТОиР=>
	
	ЗаполнитьДеревоРолейДляВыбора(Параметры.СписокРолей);
	
КонецПроцедуры

2. Вставить слeдующие строки в процедуру 
&НаКлиенте
Процедура ДобавитьВыбранныеРоли()
	
	СоставРолей.Очистить();
	
	// Получим все выбранные роли
	МассивВыбранныхРолей = Новый Массив;
	КоллекцияГруппРолей = ДеревоРолейДляВыбора.ПолучитьЭлементы();
	Для каждого ГруппаРолей Из КоллекцияГруппРолей Цикл
		
		КоллеккцияРолей = ГруппаРолей.ПолучитьЭлементы();
		
		Для каждого ЭлРоль Из КоллеккцияРолей Цикл
			Если ЭлРоль.Пометка <> 1 Тогда
				Продолжить;
			КонецЕсли;
			МассивВыбранныхРолей.Добавить(ЭлРоль.Имя);
		КонецЦикла; 
	КонецЦикла; 
	
	// Роли нужно добавить в порядке ролей конфигурации
	Для каждого РольКонфигурации Из СписокРолейКонфигурации Цикл
		Если МассивВыбранныхРолей.Найти(РольКонфигурации.ИмяРоли) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяРоль = СоставРолей.Добавить();
		НоваяРоль.ИмяРоли           = РольКонфигурации.ИмяРоли;
		НоваяРоль.ПредставлениеРоли = РольКонфигурации.ПредставлениеРоли;
		НоваяРоль.Пометка = Истина;
	КонецЦикла;
			
	// Если есть роль Пользователь, то добавим ее в конец списка
	Если ЕстьРольПользователь Тогда
		НоваяРоль = СоставРолей.Добавить();
		НоваяРоль.ИмяРоли           = "Пользователь";
		НоваяРоль.ПредставлениеРоли = "Пользователь";
		НоваяРоль.Пометка = Истина;
	КонецЕсли;
	//<=ТОиР
	//Если есть роль ТОиР, то добавим ее в конец списка
	Если ЕстьРольТОиР Тогда
		НоваяРоль = СоставРолей.Добавить();
		НоваяРоль.ИмяРоли           = "ТОиР";
		НоваяРоль.ПредставлениеРоли = "ТОиР";
		НоваяРоль.Пометка = Истина;
	КонецЕсли;	
	//ТОиР=>
	
	Модифицированность = Ложь;
	
КонецПроцедуры


ОБЩИЕ МОДУЛИ
1. В модуль ОбщийМодуль.БиблиотекаОбновленияИнформационнойБазыПереопределяемый
	в Функция ОбработчикиОбновления() Экспорт	вставить следующие строки

	// Конфигурация ТОиР 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "*";
	Обработчик.Процедура = "торо_ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы";
	//
2. В модуле ОбщийМодуль.УправлениеПользователями
	В ПолучитьСписокРолейКонфигурации(ПолучитьОписаниеРолей = Ложь) Экспорт   заменить следующие строки
	
	Если МетаРоль.Имя = "Пользователь" Тогда
		Продолжить;
	КонецЕсли;

	На

	//<=ТОиР
	Если МетаРоль.Имя = "Пользователь" ИЛИ МетаРоль.Имя = "ТОиР" Тогда
		Продолжить;
	КонецЕсли;
	//ТОиР=>

3. В модуле ОбщийМодуль.УправлениеПользователями
	В ЗаполнитьРолиПользователяИБ(ПользовательИБ, СоставРолей) вставить следующие строки

	//<=ТОиР
	//Роль "ТОиР" добавляем автоматически, если есть хотя бы одна роль торо_*
	Если НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ТОиР) Тогда
		МакетОписаниеРолейКонфигурации = ПолучитьОбщийМакет("торо_ОписаниеРолейКонфигурации");
		ОбластьСписокРолей = МакетОписаниеРолейКонфигурации.ПолучитьОбласть("ОписаниеРолей");
		Для Сч = 1 По ОбластьСписокРолей.ВысотаТаблицы Цикл
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли[ОбластьСписокРолей.Область(Сч,1,Сч,1).Текст]) Тогда
				ПользовательИБ.Роли.Добавить(Метаданные.Роли.ТОиР);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ТОиР=>

4. В модуль ОбщийМодуль.СтандартныеПодсистемыПереопределяемый,
   в функцию ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем добавить строки:

	//=> ТОиР
	// ОбменДанными
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиВключен",                           "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	// Конец ОбменДанными
	//<= ТОиР

	

СПРАВОЧНИКИ
Справочники.Пользователи.Форма.ФормаРедактированиеПользователяИБ.Модуль
	1. В Процедура ЗаписатьПользователяИБ(Отказ, ТекущийОбъект) добавить строки
	//<=ТОиР
	//Роль "ТОиР" добавляем автоматически, если есть хотя бы одна роль торо_*
	Если СписокРолей.Найти("ТОиР", "ИмяРоли") = Неопределено Тогда
		МакетОписаниеРолейКонфигурации = ПолучитьОбщийМакет("торо_ОписаниеРолейКонфигурации");
		ОбластьСписокРолей = МакетОписаниеРолейКонфигурации.ПолучитьОбласть("ОписаниеРолей");
		Для Сч = 1 По ОбластьСписокРолей.ВысотаТаблицы Цикл
			Если СписокРолей.Найти(ОбластьСписокРолей.Область(Сч,1,Сч,1).Текст, "ИмяРоли") <> Неопределено Тогда
				НоваяСтрока = СписокРолей.Добавить();
				НоваяСтрока.ИмяРоли = "ТОиР";
				НоваяСтрока.Пометка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ТОиР=>
	2. В УдалитьВыбранныеРоли() заменить строки

	Если РольОбъекта.ИмяРоли = "Пользователь" Тогда
		// Роль "Пользователь" нельзя удалять
		Продолжить;
	КонецЕсли;

	На	
	
	//<=ТОиР
	Если РольОбъекта.ИмяРоли = "Пользователь" ИЛИ РольОбъекта.ИмяРоли = "ТОиР" Тогда
		// Роли "Пользователь" и "ТОиР" нельзя удалять
		Продолжить;
	КонецЕсли;
	//ТОиР=>
	3. В Процедура ЗаполнитьСписокРолейПользователяИБ(Знач ПользовательИБ = Неопределено)  вставить строки
	//<=ТОиР
	Если РольПользователя.Имя = "ТОиР" Тогда
		// Роль "ТОиР" не показываем в списке
		// Предполагается, что она есть у всех пользователей, имеющих одну из ролей торо_*
		Продолжить;
	КонецЕсли;	
	//ТОиР=>


